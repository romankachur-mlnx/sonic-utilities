#! /usr/bin/python

import swsssdk
import sys
import re
from tabulate import tabulate
from natsort import natsorted



# ========================== Common interface-utils logic ==========================


PORT_STATUS_TABLE_PREFIX = "PORT_TABLE:"
PORT_TRANSCEIVER_TABLE_PREFIX = "TRANSCEIVER_INFO|"
PORT_LANES_STATUS = "lanes"
PORT_ALIAS = "alias"
PORT_OPER_STATUS = "oper_status"
PORT_ADMIN_STATUS = "admin_status"
PORT_SPEED = "speed"
PORT_MTU_STATUS = "mtu"
PORT_DESCRIPTION = "description"
PORT_OPTICS_TYPE = "type"


def db_connect_appl():
    appl_db = swsssdk.SonicV2Connector(host='127.0.0.1')
    if appl_db is None:
        return None

    appl_db.connect(appl_db.APPL_DB)

    return appl_db


def appl_db_keys_get(appl_db, intf_name):

    if intf_name is None:
        appl_db_keys = appl_db.keys(appl_db.APPL_DB, "PORT_TABLE:*")
    elif intf_name.startswith('Ethernet'):
        appl_db_keys = db.keys(appl_db.APPL_DB, "PORT_TABLE:%s" % intf_name)
    else:
        return None

    return appl_db_keys


def appl_db_port_status_get(appl_db, intf_name, status_type):
    """
    Get the port status
    """

    full_table_id = PORT_STATUS_TABLE_PREFIX + intf_name
    status = appl_db.get(appl_db.APPL_DB, full_table_id, status_type)
    if status is None:
        return "N/A"

    if status_type == PORT_SPEED and status != "N/A":
       status = '{}G'.format(status[:-3])

    return status


def db_connect_state():
    """
    Connect to REDIS STATE DB and get optics info
    """
    state_db = swsssdk.SonicV2Connector(host='127.0.0.1')
    if state_db is None:
        return None
    state_db.connect(state_db.STATE_DB, False)   # Make one attempt only
    return state_db


def state_db_port_optics_get(state_db, intf_name, type):
    """
    Get optic type info for port
    """
    full_table_id = PORT_TRANSCEIVER_TABLE_PREFIX + intf_name
    optics_type = state_db.get(state_db.STATE_DB, full_table_id, type)
    if optics_type is None: 
        return "N/A" 
    return optics_type 

# ========================== interface-status logic ==========================

header_stat = ['Interface', 'Lanes', 'Speed', 'MTU', 'Alias', 'Oper', 'Admin', 'Type']

class IntfStatus(object):

    def display_intf_status(self, appl_db_keys):
        """
            Generate interface-status output
        """

        i = {}
        table = []
        key = []

        #
        # Iterate through all the keys and append port's associated state to
        # the result table.
        #
        for i in appl_db_keys:
            key = re.split(':', i, maxsplit=1)[-1].strip()
            if key and key.startswith('Ethernet'):
                table.append((key,
                              appl_db_port_status_get(self.appl_db, key, PORT_LANES_STATUS),
                              appl_db_port_status_get(self.appl_db, key, PORT_SPEED),
                              appl_db_port_status_get(self.appl_db, key, PORT_MTU_STATUS),
                              appl_db_port_status_get(self.appl_db, key, PORT_ALIAS),
                              appl_db_port_status_get(self.appl_db, key, PORT_OPER_STATUS),
                              appl_db_port_status_get(self.appl_db, key, PORT_ADMIN_STATUS),
                              state_db_port_optics_get(self.state_db, key, PORT_OPTICS_TYPE)))

        # Sorting and tabulating the result table.
        sorted_table = natsorted(table)
        print tabulate(sorted_table, header_stat, tablefmt="simple", stralign='right')


    def __init__(self, intf_name):

        self.appl_db = db_connect_appl()
        self.state_db = db_connect_state()
        if self.appl_db is None:
            return
        if self.state_db is None: 
            return
        appl_db_keys = appl_db_keys_get(self.appl_db, intf_name)
        if appl_db_keys is None:
            return
        self.display_intf_status(appl_db_keys)



# ========================== interface-description logic ==========================


header_desc = ['Interface', 'Oper', 'Admin', 'Alias', 'Description']


class IntfDescription(object):

    def display_intf_description(self, appl_db_keys):
        """
            Generate interface-description output
        """

        i = {}
        table = []
        key = []

        #
        # Iterate through all the keys and append port's associated state to
        # the result table.
        #
        for i in appl_db_keys:
            key = re.split(':', i, maxsplit=1)[-1].strip()
            if key and key.startswith('Ethernet'):
                table.append((key,
                              appl_db_port_status_get(self.appl_db, key, PORT_OPER_STATUS),
                              appl_db_port_status_get(self.appl_db, key, PORT_ADMIN_STATUS),
                              appl_db_port_status_get(self.appl_db, key, PORT_ALIAS),
                              appl_db_port_status_get(self.appl_db, key, PORT_DESCRIPTION)))

        # Sorting and tabulating the result table.
        sorted_table = natsorted(table)
        print tabulate(sorted_table, header_desc, tablefmt="simple", stralign='right')

    def __init__(self, intf_name):

        self.appl_db = db_connect_appl()
        if self.appl_db is None:
            return

        appl_db_keys = appl_db_keys_get(self.appl_db, intf_name)
        if appl_db_keys is None:
            return

        self.display_intf_description(appl_db_keys)



def main(args):
    if len(args) == 0:
        print "No valid arguments provided"
        return

    command = args[0]
    if command != "status" and command != "description":
        print "No valid command provided"
        return

    intf_name = args[1] if len(args) == 2 else None

    if command == "status":
        interface_stat = IntfStatus(intf_name)
    elif command == "description":
        interface_desc = IntfDescription(intf_name)

    sys.exit(0)

if __name__ == "__main__":
    main(sys.argv[1:])
